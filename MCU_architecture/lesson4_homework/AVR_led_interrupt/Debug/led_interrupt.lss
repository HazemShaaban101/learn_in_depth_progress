
led_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f8  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c6  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_2>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_func>:
#define MCUCSR_r	(*(unsigned long *) 0x54)		// Interrupt Sense Control 2	

void init_func()
{
	
	DDRD_r = 0b111 << 5;				// turns on bits 5, 6, 7 in the register, causing corresponding pins to be directed as output
  6c:	80 ee       	ldi	r24, 0xE0	; 224
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	a0 e0       	ldi	r26, 0x00	; 0
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	81 bb       	out	0x11, r24	; 17
  76:	92 bb       	out	0x12, r25	; 18
  78:	a3 bb       	out	0x13, r26	; 19
  7a:	b4 bb       	out	0x14, r27	; 20
	
	MCUCR_r |= 0b1101;					// sets interrupt 0 to detect all logical changes, and interrupt 1 to detect rising edge
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	96 b7       	in	r25, 0x36	; 54
  80:	a7 b7       	in	r26, 0x37	; 55
  82:	b8 b7       	in	r27, 0x38	; 56
  84:	8d 60       	ori	r24, 0x0D	; 13
  86:	85 bf       	out	0x35, r24	; 53
  88:	96 bf       	out	0x36, r25	; 54
  8a:	a7 bf       	out	0x37, r26	; 55
  8c:	b8 bf       	out	0x38, r27	; 56
	MCUCSR_r &= ~(1 << 6);				// sets interrupt 2 to detect falling edge
  8e:	84 b7       	in	r24, 0x34	; 52
  90:	95 b7       	in	r25, 0x35	; 53
  92:	a6 b7       	in	r26, 0x36	; 54
  94:	b7 b7       	in	r27, 0x37	; 55
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	84 bf       	out	0x34, r24	; 52
  9a:	95 bf       	out	0x35, r25	; 53
  9c:	a6 bf       	out	0x36, r26	; 54
  9e:	b7 bf       	out	0x37, r27	; 55
	GICR_r |= 0b111 << 5;				// turn on individual interrupts
  a0:	8b b7       	in	r24, 0x3b	; 59
  a2:	9c b7       	in	r25, 0x3c	; 60
  a4:	ad b7       	in	r26, 0x3d	; 61
  a6:	be b7       	in	r27, 0x3e	; 62
  a8:	80 6e       	ori	r24, 0xE0	; 224
  aa:	8b bf       	out	0x3b, r24	; 59
  ac:	9c bf       	out	0x3c, r25	; 60
  ae:	ad bf       	out	0x3d, r26	; 61
  b0:	be bf       	out	0x3e, r27	; 62
	sei();								// turns on global interrupt mask
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <__vector_1>:
	
}

// interrupt 0 function vector
ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
	PORTD_r |= 1 << 5;	// turn on pin 5 port D
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	93 b3       	in	r25, 0x13	; 19
  ce:	a4 b3       	in	r26, 0x14	; 20
  d0:	b5 b3       	in	r27, 0x15	; 21
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	93 bb       	out	0x13, r25	; 19
  d8:	a4 bb       	out	0x14, r26	; 20
  da:	b5 bb       	out	0x15, r27	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e3       	ldi	r18, 0x3F	; 63
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <__vector_1+0x2c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <__vector_1+0x36>
  ec:	00 00       	nop
	_delay_ms(1000);
}
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_2>:

// interrupt 1 function vector
ISR(INT1_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
	PORTD_r |= 1 << 6;	// turn on pin 6 port D
 116:	82 b3       	in	r24, 0x12	; 18
 118:	93 b3       	in	r25, 0x13	; 19
 11a:	a4 b3       	in	r26, 0x14	; 20
 11c:	b5 b3       	in	r27, 0x15	; 21
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	82 bb       	out	0x12, r24	; 18
 122:	93 bb       	out	0x13, r25	; 19
 124:	a4 bb       	out	0x14, r26	; 20
 126:	b5 bb       	out	0x15, r27	; 21
 128:	2f e3       	ldi	r18, 0x3F	; 63
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <__vector_2+0x2c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <__vector_2+0x36>
 138:	00 00       	nop
	_delay_ms(1000);
}
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_3>:

// interrupt 2 function vector
ISR(INT2_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
	PORTD_r |= 1 << 7;	// turn on pin 7 port D
 162:	82 b3       	in	r24, 0x12	; 18
 164:	93 b3       	in	r25, 0x13	; 19
 166:	a4 b3       	in	r26, 0x14	; 20
 168:	b5 b3       	in	r27, 0x15	; 21
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	93 bb       	out	0x13, r25	; 19
 170:	a4 bb       	out	0x14, r26	; 20
 172:	b5 bb       	out	0x15, r27	; 21
 174:	2f e3       	ldi	r18, 0x3F	; 63
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <__vector_3+0x2c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <__vector_3+0x36>
 184:	00 00       	nop
	_delay_ms(1000);
}
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:

int main(void)
{
    init_func();
 19a:	0e 94 36 00 	call	0x6c	; 0x6c <init_func>
    while (1) 
    {
		PORTD_r &= ~(0xFF);	// turn off all pins in port D
 19e:	82 b3       	in	r24, 0x12	; 18
 1a0:	93 b3       	in	r25, 0x13	; 19
 1a2:	a4 b3       	in	r26, 0x14	; 20
 1a4:	b5 b3       	in	r27, 0x15	; 21
 1a6:	88 27       	eor	r24, r24
 1a8:	82 bb       	out	0x12, r24	; 18
 1aa:	93 bb       	out	0x13, r25	; 19
 1ac:	a4 bb       	out	0x14, r26	; 20
 1ae:	b5 bb       	out	0x15, r27	; 21
 1b0:	2f e3       	ldi	r18, 0x3F	; 63
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x1c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x26>
 1c0:	00 00       	nop
 1c2:	ed cf       	rjmp	.-38     	; 0x19e <main+0x4>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
